// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// optim_count_poisson_cpp
Rcpp::List optim_count_poisson_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_count_poisson_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_count_poisson_cpp(start, Y, X, offsetx, weights, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_count_negbin_cpp
Rcpp::List optim_count_negbin_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_count_negbin_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_count_negbin_cpp(start, Y, X, offsetx, weights, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_count_geom_cpp
Rcpp::List optim_count_geom_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_count_geom_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_count_geom_cpp(start, Y, X, offsetx, weights, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_zero_poisson_cpp
Rcpp::List optim_zero_poisson_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_zero_poisson_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_zero_poisson_cpp(start, Y, X, offsetx, weights, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_zero_negbin_cpp
Rcpp::List optim_zero_negbin_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_zero_negbin_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_zero_negbin_cpp(start, Y, X, offsetx, weights, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_zero_geom_cpp
Rcpp::List optim_zero_geom_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_zero_geom_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_zero_geom_cpp(start, Y, X, offsetx, weights, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_zero_binom_cpp
Rcpp::List optim_zero_binom_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::vec& weights, const std::string& link, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_zero_binom_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP weightsSEXP, SEXP linkSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_zero_binom_cpp(start, Y, X, offsetx, weights, link, method, hessian));
    return rcpp_result_gen;
END_RCPP
}
// optim_joint_cpp
Rcpp::List optim_joint_cpp(const arma::vec& start, const arma::vec& Y, const arma::mat& X, const arma::vec& offsetx, const arma::mat& Z, const arma::vec& offsetz, const arma::vec& weights, const std::string& dist, const std::string& zero_dist, const std::string& link, const std::string& method, bool hessian);
RcppExport SEXP _fasthurdle_optim_joint_cpp(SEXP startSEXP, SEXP YSEXP, SEXP XSEXP, SEXP offsetxSEXP, SEXP ZSEXP, SEXP offsetzSEXP, SEXP weightsSEXP, SEXP distSEXP, SEXP zero_distSEXP, SEXP linkSEXP, SEXP methodSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetx(offsetxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsetz(offsetzSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type zero_dist(zero_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_joint_cpp(start, Y, X, offsetx, Z, offsetz, weights, dist, zero_dist, link, method, hessian));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fasthurdle_optim_count_poisson_cpp", (DL_FUNC) &_fasthurdle_optim_count_poisson_cpp, 7},
    {"_fasthurdle_optim_count_negbin_cpp", (DL_FUNC) &_fasthurdle_optim_count_negbin_cpp, 7},
    {"_fasthurdle_optim_count_geom_cpp", (DL_FUNC) &_fasthurdle_optim_count_geom_cpp, 7},
    {"_fasthurdle_optim_zero_poisson_cpp", (DL_FUNC) &_fasthurdle_optim_zero_poisson_cpp, 7},
    {"_fasthurdle_optim_zero_negbin_cpp", (DL_FUNC) &_fasthurdle_optim_zero_negbin_cpp, 7},
    {"_fasthurdle_optim_zero_geom_cpp", (DL_FUNC) &_fasthurdle_optim_zero_geom_cpp, 7},
    {"_fasthurdle_optim_zero_binom_cpp", (DL_FUNC) &_fasthurdle_optim_zero_binom_cpp, 8},
    {"_fasthurdle_optim_joint_cpp", (DL_FUNC) &_fasthurdle_optim_joint_cpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_fasthurdle(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
